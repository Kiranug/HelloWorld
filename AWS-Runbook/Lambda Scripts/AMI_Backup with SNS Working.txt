# This script will search for all instances based on tags
# on it. As soon as we have the instances list, we loop through each instance
# and create an AMI of it. Also, it will look for a "Retention" tag key which
# will be used as a retention policy number in days.
# After creating the AMI it creates a "DeleteOn" tag on the AMI indicating when
# it will be deleted using the Retention value and another Lambda function

import boto3
import collections
import datetime
import os
import time

ec = boto3.client('ec2')
sns_client = boto3.client('sns')


ec = boto3.client('ec2')

def lambda_handler(event, context):

    accountNumber = os.environ['AWS_ACCOUNT_NUMBER']
    retentionDays = int(os.environ['RETENTION_DAYS'])

    reservations = ec.describe_instances(
        Filters=[
            {'Name': 'tag:Backup', 'Values': ['True']}
        ]
    ).get(
        'Reservations', []
    )

    instances = sum(
        [
            [i for i in r['Instances']]
            for r in reservations
        ], [])

    print "Found %d instances that need backing up" % len(instances)

    to_tag = collections.defaultdict(list)
    amiList = []
    for instance in instances:
        try:
            retention_days = [
                int(t.get('Value')) for t in instance['Tags']
                if t['Key'] == 'Retention'][0]
        except IndexError:
            retention_days = retentionDays

            create_time = datetime.datetime.now()
            create_fmt = create_time.strftime('%Y-%m-%d-%H-%M-%S')

            for tag in instance['Tags']:
                if tag['Key'] == 'Name':
                    amiName = tag['Value']
                    break

            AMIid = ec.create_image(InstanceId=instance['InstanceId'], Name= amiName + " " + instance['InstanceId'] + " " + create_fmt, Description="Lambda created AMI of instance " + instance['InstanceId'] + " on " + create_fmt, NoReboot=True, DryRun=False)

            to_tag[retention_days].append(AMIid['ImageId'])
            amiList.append(AMIid['ImageId'])
            print "Retaining AMI %s of instance %s for %d days" % (
                AMIid['ImageId'],
                instance['InstanceId'],
                retention_days,
            )

    for retention_days in to_tag.keys():
        delete_date = datetime.date.today() + datetime.timedelta(days=retention_days)
        delete_fmt = delete_date.strftime('%m-%d-%Y')
        print "Will delete %d AMIs on %s" % (len(to_tag[retention_days]), delete_fmt)

        ec.create_tags(
            Resources=to_tag[retention_days],
            Tags=[
                {'Key': 'DeleteOn', 'Value': delete_fmt},
				{'Key': 'Backup', 'Value': 'True'}
            ]
        )

    snapshotMaster = []
    time.sleep(5)
    ami_ids = str()
    print amiList
    for ami in amiList:
        print ami
        ami_ids = ami_ids + "\n" + ami
        snapshots = ec.describe_snapshots(
            DryRun=False,
            OwnerIds=[
                accountNumber
            ],
            Filters=[
                {
                    'Name': 'description',
                    'Values': [
                        '*' + ami + '*'
                    ]
                }
            ]
        ).get(
            'Snapshots', []
        )
        print "****************"

        for snapshot in snapshots:
            print snapshot['SnapshotId']
            ec.create_tags(
                Resources=[snapshot['SnapshotId']],
                Tags=[
                    {'Key': 'DeleteOn', 'Value': delete_fmt},
                    {'Key': 'CreatedByLambdaFun', 'Value': 'BFLGLA-SNAPSHOTBACKUP-ID'},
					{'Key': 'Backup', 'Value': 'True'},
					{'Key': 'AMIID', 'Value': ami}
                ]
            )
###Environment variables
  ##RETENTION_DAYS = 7
  ##AWS_ACCOUNT_NUMBER = xxxxxxxxxxxxxx
  ##put this values when configuring  using lambda
  
        #TODO use snapshotids to send email
    sns_client.publish(
       TopicArn ="arn:aws:sns:us-east-1:746880264403:MYSNS",
        Message = ami_ids,
        Subject = "AMI Backup"
    )